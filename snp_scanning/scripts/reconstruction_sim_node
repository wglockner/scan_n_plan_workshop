#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
import sys
import open3d
from industrial_reconstruction_msgs.srv import StartReconstruction
from industrial_reconstruction_msgs.srv import StopReconstruction
from industrial_reconstruction_msgs.srv import StartEnhancedReconstruction
from industrial_reconstruction.industrial_reconstruction import meshToRos
from visualization_msgs.msg import Marker
import shutil
import os

MESH_FILE_PARAMETER = "mesh_file"
REFERENCE_FRAME_PARAMETER = "reference_frame"
MESH_TOPIC = "mesh"


class ReconstructionSimServer(Node):
    def __init__(self):
        super().__init__("reconstruction_sim_node")

        self.start_srv = self.create_service(StartReconstruction, "start_reconstruction", self.start_cb)
        self.start_enhanced_srv = self.create_service(StartEnhancedReconstruction, "start_enhanced_reconstruction", self.start_enhanced_cb)
        self.stop_srv = self.create_service(StopReconstruction, "stop_reconstruction", self.stop_cb)

        self.scan_mesh_pub = self.create_publisher(Marker, MESH_TOPIC, 100)

        self.mesh_file_parameter = self.declare_parameter(MESH_FILE_PARAMETER, rclpy.Parameter.Type.STRING).value
        self.reference_frame_parameter = self.declare_parameter(REFERENCE_FRAME_PARAMETER, rclpy.Parameter.Type.STRING).value

        self.get_logger().info("Started simulated reconstruction node")

    def start_cb(self, _request, response):
        response.success = True
        return response

    def start_enhanced_cb(self, _request, response):
        # Enhanced reconstruction simulation - log the enhanced parameters
        self.get_logger().info("Enhanced reconstruction started with improved mesh quality features")
        response.success = True
        response.message = "Enhanced reconstruction simulation started successfully"
        return response

    def stop_cb(self, request, response):
        try:
            # Copy the mesh to the target destination
            mesh_file = self.get_parameter(MESH_FILE_PARAMETER).value
            os.makedirs(os.path.dirname(mesh_file), exist_ok=True)
            shutil.copy2(mesh_file, request.mesh_filepath)

            # Publish the mesh visualization message
            msg = meshToRos(open3d.io.read_triangle_mesh(mesh_file))
            msg.header.frame_id = self.get_parameter(REFERENCE_FRAME_PARAMETER).value
            self.scan_mesh_pub.publish(msg)

            response.success = True
            response.message = f'Scanning simulation complete; mesh saved to "{mesh_file}"'

        except Exception as e:
            response.success = False
            response.message = str(e)

        return response


def main():
    rclpy.init(args=sys.argv)
    node = ReconstructionSimServer()
    rclpy.spin(node)
    rclpy.shutdown()


if __name__ == '__main__':
    main()
